// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using СonstructionСompany;

#nullable disable

namespace СonstructionСompany.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241010154842_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("BuildingMaterialBuildingMaterialDistribution", b =>
                {
                    b.Property<Guid>("BuildingMaterialsDistributionId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("BuildingMaterialsId")
                        .HasColumnType("uuid");

                    b.HasKey("BuildingMaterialsDistributionId", "BuildingMaterialsId");

                    b.HasIndex("BuildingMaterialsId");

                    b.ToTable("BuildingMaterialBuildingMaterialDistribution");
                });

            modelBuilder.Entity("BuildingMaterialBuyingBuildingMaterials", b =>
                {
                    b.Property<Guid>("BuildingMaterialsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("BuyingBuildingMaterialsId")
                        .HasColumnType("uuid");

                    b.HasKey("BuildingMaterialsId", "BuyingBuildingMaterialsId");

                    b.HasIndex("BuyingBuildingMaterialsId");

                    b.ToTable("BuildingMaterialBuyingBuildingMaterials");
                });

            modelBuilder.Entity("BuildingMaterialEstimate", b =>
                {
                    b.Property<Guid>("BuildingMaterialsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("EstimatesId")
                        .HasColumnType("uuid");

                    b.HasKey("BuildingMaterialsId", "EstimatesId");

                    b.HasIndex("EstimatesId");

                    b.ToTable("BuildingMaterialEstimate");
                });

            modelBuilder.Entity("BuildingMaterialWarehouse", b =>
                {
                    b.Property<Guid>("BuildingMaterialsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("WarehousesId")
                        .HasColumnType("uuid");

                    b.HasKey("BuildingMaterialsId", "WarehousesId");

                    b.HasIndex("WarehousesId");

                    b.ToTable("BuildingMaterialWarehouse");
                });

            modelBuilder.Entity("СonstructionСompany.Model.AccountingForWorkPerformed", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BrigadeId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ObjectId")
                        .HasColumnType("uuid");

                    b.Property<string>("WorkDescription")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("BrigadeId");

                    b.HasIndex("ObjectId");

                    b.ToTable("AccountingForWorkPerformeds");
                });

            modelBuilder.Entity("СonstructionСompany.Model.Bank", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("Banks");
                });

            modelBuilder.Entity("СonstructionСompany.Model.Brigade", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("Brigades");
                });

            modelBuilder.Entity("СonstructionСompany.Model.Builder", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BrigadeId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("LengthOfService")
                        .HasColumnType("integer");

                    b.Property<string>("Patronymic")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("ResidentialAddress")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("SecondName")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Specialties")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("Id");

                    b.HasIndex("BrigadeId");

                    b.ToTable("Builders");
                });

            modelBuilder.Entity("СonstructionСompany.Model.BuildingMaterial", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("SupplierId")
                        .HasColumnType("uuid");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("Id");

                    b.HasIndex("SupplierId");

                    b.ToTable("BuildingMaterials");
                });

            modelBuilder.Entity("СonstructionСompany.Model.BuildingMaterialDistribution", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<List<int>>("CountMaterials")
                        .IsRequired()
                        .HasColumnType("integer[]");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ObjectId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("WarehouseId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ObjectId");

                    b.HasIndex("WarehouseId");

                    b.ToTable("BuildingMaterialDistributions");
                });

            modelBuilder.Entity("СonstructionСompany.Model.BuyingBuildingMaterials", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<List<int>>("CountMaterials")
                        .IsRequired()
                        .HasColumnType("integer[]");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("SupplierId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("WarehouseId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("SupplierId");

                    b.HasIndex("WarehouseId");

                    b.ToTable("BuyingBuildingMaterials");
                });

            modelBuilder.Entity("СonstructionСompany.Model.Estimate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<List<int>>("CountMaterials")
                        .IsRequired()
                        .HasColumnType("integer[]");

                    b.Property<Guid>("ObjectId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("ObjectId");

                    b.ToTable("Estimates");
                });

            modelBuilder.Entity("СonstructionСompany.Model.Object", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("Objects");
                });

            modelBuilder.Entity("СonstructionСompany.Model.Supplier", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("BIK")
                        .HasColumnType("text");

                    b.Property<Guid>("BankId")
                        .HasColumnType("uuid");

                    b.Property<string>("CorrespondentAccount")
                        .HasColumnType("text");

                    b.Property<string>("FirstNameOfSupervisor")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("INN")
                        .HasColumnType("text");

                    b.Property<string>("KPP")
                        .HasColumnType("text");

                    b.Property<string>("NameOfOrganization")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<string>("OGRN")
                        .HasColumnType("text");

                    b.Property<string>("PatronymicOfSupervisor")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("SecondNameOfSupervisor")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("SettlementAccount")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("BankId");

                    b.ToTable("Suppliers");
                });

            modelBuilder.Entity("СonstructionСompany.Model.Warehouse", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<List<int>>("CountMaterials")
                        .IsRequired()
                        .HasColumnType("integer[]");

                    b.HasKey("Id");

                    b.ToTable("Warehouses");
                });

            modelBuilder.Entity("BuildingMaterialBuildingMaterialDistribution", b =>
                {
                    b.HasOne("СonstructionСompany.Model.BuildingMaterialDistribution", null)
                        .WithMany()
                        .HasForeignKey("BuildingMaterialsDistributionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("СonstructionСompany.Model.BuildingMaterial", null)
                        .WithMany()
                        .HasForeignKey("BuildingMaterialsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_BuildingMaterialBuildingMaterialDistribution_BuildingMater~1");
                });

            modelBuilder.Entity("BuildingMaterialBuyingBuildingMaterials", b =>
                {
                    b.HasOne("СonstructionСompany.Model.BuildingMaterial", null)
                        .WithMany()
                        .HasForeignKey("BuildingMaterialsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("СonstructionСompany.Model.BuyingBuildingMaterials", null)
                        .WithMany()
                        .HasForeignKey("BuyingBuildingMaterialsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BuildingMaterialEstimate", b =>
                {
                    b.HasOne("СonstructionСompany.Model.BuildingMaterial", null)
                        .WithMany()
                        .HasForeignKey("BuildingMaterialsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("СonstructionСompany.Model.Estimate", null)
                        .WithMany()
                        .HasForeignKey("EstimatesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BuildingMaterialWarehouse", b =>
                {
                    b.HasOne("СonstructionСompany.Model.BuildingMaterial", null)
                        .WithMany()
                        .HasForeignKey("BuildingMaterialsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("СonstructionСompany.Model.Warehouse", null)
                        .WithMany()
                        .HasForeignKey("WarehousesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("СonstructionСompany.Model.AccountingForWorkPerformed", b =>
                {
                    b.HasOne("СonstructionСompany.Model.Brigade", "Brigade")
                        .WithMany("accountingForWorkPerformeds")
                        .HasForeignKey("BrigadeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("СonstructionСompany.Model.Object", "Object")
                        .WithMany("AccountingForWorkPerformeds")
                        .HasForeignKey("ObjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Brigade");

                    b.Navigation("Object");
                });

            modelBuilder.Entity("СonstructionСompany.Model.Builder", b =>
                {
                    b.HasOne("СonstructionСompany.Model.Brigade", "Brigade")
                        .WithMany("Builders")
                        .HasForeignKey("BrigadeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Brigade");
                });

            modelBuilder.Entity("СonstructionСompany.Model.BuildingMaterial", b =>
                {
                    b.HasOne("СonstructionСompany.Model.Supplier", "Supplier")
                        .WithMany("BuildingMaterials")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("СonstructionСompany.Model.BuildingMaterialDistribution", b =>
                {
                    b.HasOne("СonstructionСompany.Model.Object", "Object")
                        .WithMany("BuildingMaterialDistributions")
                        .HasForeignKey("ObjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("СonstructionСompany.Model.Warehouse", "Warehouse")
                        .WithMany("MaterialDistributions")
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Object");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("СonstructionСompany.Model.BuyingBuildingMaterials", b =>
                {
                    b.HasOne("СonstructionСompany.Model.Supplier", "Supplier")
                        .WithMany("BuyingBuildingMaterials")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("СonstructionСompany.Model.Warehouse", "Warehouse")
                        .WithMany("BuyingBuildingMaterials")
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Supplier");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("СonstructionСompany.Model.Estimate", b =>
                {
                    b.HasOne("СonstructionСompany.Model.Object", "Object")
                        .WithMany("Estimates")
                        .HasForeignKey("ObjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Object");
                });

            modelBuilder.Entity("СonstructionСompany.Model.Supplier", b =>
                {
                    b.HasOne("СonstructionСompany.Model.Bank", "Bank")
                        .WithMany("Suppliers")
                        .HasForeignKey("BankId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bank");
                });

            modelBuilder.Entity("СonstructionСompany.Model.Bank", b =>
                {
                    b.Navigation("Suppliers");
                });

            modelBuilder.Entity("СonstructionСompany.Model.Brigade", b =>
                {
                    b.Navigation("Builders");

                    b.Navigation("accountingForWorkPerformeds");
                });

            modelBuilder.Entity("СonstructionСompany.Model.Object", b =>
                {
                    b.Navigation("AccountingForWorkPerformeds");

                    b.Navigation("BuildingMaterialDistributions");

                    b.Navigation("Estimates");
                });

            modelBuilder.Entity("СonstructionСompany.Model.Supplier", b =>
                {
                    b.Navigation("BuildingMaterials");

                    b.Navigation("BuyingBuildingMaterials");
                });

            modelBuilder.Entity("СonstructionСompany.Model.Warehouse", b =>
                {
                    b.Navigation("BuyingBuildingMaterials");

                    b.Navigation("MaterialDistributions");
                });
#pragma warning restore 612, 618
        }
    }
}
